#!/bin/bash
#
# Create a Kopia snapshot with optional ZFS snapshot."
#
# ARG_OPTIONAL_SINGLE([zfs],[z],[zfs snapshot to create ex. tank/myfs@kopia])
# ARG_OPTIONAL_SINGLE([override-source],[o],[Override source path])
# ARG_POSITIONAL_SINGLE([path],[Kopia source path for snapshot ])
# ARG_HELP([The general script's help msg])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.9.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='zoh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_zfs=
_arg_override_source=


print_help()
{
	printf '%s\n' "The general script's help msg"
	printf 'Usage: %s [-z|--zfs <arg>] [-o|--override-source <arg>] [-h|--help] <path>\n' "$0"
	printf '\t%s\n' "<path>: Kopia source path for snapshot "
	printf '\t%s\n' "-z, --zfs: zfs snapshot to create ex. tank/myfs@kopia (no default)"
	printf '\t%s\n' "-o, --override-source: Override source path (no default)"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-z|--zfs)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_zfs="$2"
				shift
				;;
			--zfs=*)
				_arg_zfs="${_key##--zfs=}"
				;;
			-z*)
				_arg_zfs="${_key##-z}"
				;;
			-o|--override-source)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_override_source="$2"
				shift
				;;
			--override-source=*)
				_arg_override_source="${_key##--override-source=}"
				;;
			-o*)
				_arg_override_source="${_key##-o}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'path'"
	test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 1 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 1 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_path "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


# Create ZFS snapshot if specified
if [ -n "$_arg_zfs" ]; then
    echo "Creating ZFS snapshot $_arg_zfs..."
    if ! zfs snapshot "$_arg_zfs"; then
        echo "Failed to create ZFS snapshot: $_arg_zfs"
        exit 1
    fi
fi

# Prepare kopia snapshot command
KOPIA_COMMAND="kopia snapshot create"

if [ -n "$_arg_override_source" ]; then
    KOPIA_COMMAND+=" --override-source $_arg_override_source"
fi

KOPIA_COMMAND+=" $_arg_path"

# Create kopia snapshot
echo "Creating kopia snapshot..."
if ! eval "$KOPIA_COMMAND"; then
    echo "Failed to create kopia snapshot"
    exit 1
fi

echo "Finished creating kopia snapshot"

# Destroy ZFS snapshot if it was created
if [ -n "$_arg_zfs" ]; then
    echo "Destroying ZFS snapshot $_arg_zfs..."
    if ! zfs destroy "$_arg_zfs"; then
        echo "Failed to destroy ZFS snapshot: $_arg_zfs"
        exit 1
    fi
fi

# ] <-- needed because of Argbash



